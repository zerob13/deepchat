name: Build Application

on:
  workflow_dispatch:
    inputs:
      platform:
        description: '选择构建平台'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - windows
          - linux
      release_tag:
        description: '发布标签（留空使用最新tag）'
        required: false
        type: string

jobs:
  build-windows:
    if: github.event.inputs.platform == 'all' || contains(github.event.inputs.platform, 'windows')
    runs-on: windows-latest
    strategy:
      matrix:
        arch: [x64, arm64]
        include:
          - arch: x64
            platform: win-x64
          - arch: arm64
            platform: win-arm64
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
      - name: Install dependencies
        run: npm install
        env:
          npm_config_platform: win32
          npm_config_arch: ${{ matrix.arch }}
      - name: Install Node Runtime
        run: npm run installRuntime:win:${{ matrix.arch }}
      - name: Install Sharp
        run: npm install sharp  --build-from-source
      - name: Build Windows
        run: npm run build:win:${{ matrix.arch }}
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deepchat-${{ matrix.platform }}
          path: |
            dist/*
            !dist/win-unpacked

  build-linux:
    if: github.event.inputs.platform == 'all' || contains(github.event.inputs.platform, 'linux')
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        arch: [x64]
        include:
          - arch: x64
            platform: linux-x64
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
      - name: Install dependencies
        run: npm install
        env:
          npm_config_platform: linux
          npm_config_arch: ${{ matrix.arch }}
      - name: Install Node Runtime
        run: npm run installRuntime:linux:${{ matrix.arch }}
      - name: Install Sharp
        run: npm install --cpu=wasm32 sharp
      - name: Build Linux
        run: npm run build:linux:${{ matrix.arch }}
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deepchat-${{ matrix.platform }}
          path: |
            dist/*
            !dist/linux-unpacked

  release-windows:
    needs: build-windows
    runs-on: ubuntu-latest
    if: github.event.inputs.platform == 'all' || contains(github.event.inputs.platform, 'windows')
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Get release tag
        id: get_tag
        run: |
          if [ -z "${{ github.event.inputs.release_tag }}" ]; then
            TAG=$(git describe --tags --abbrev=0 || echo "v1.0.0")
          else
            TAG="${{ github.event.inputs.release_tag }}"
          fi
          echo "RELEASE_TAG=$TAG" >> $GITHUB_ENV
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ env.RELEASE_TAG }}
          name: Release ${{ env.RELEASE_TAG }}
          draft: false
          prerelease: false
          allowUpdates: true
          omitNameDuringUpdate: true
          omitBodyDuringUpdate: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Windows x64 exe
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ env.RELEASE_TAG }}
          artifacts: 'artifacts/deepchat-win-x64/*.exe'
          allowUpdates: true
          omitNameDuringUpdate: true
          omitBodyDuringUpdate: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Windows arm64 exe
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ env.RELEASE_TAG }}
          artifacts: 'artifacts/deepchat-win-arm64/*.exe'
          allowUpdates: true
          omitNameDuringUpdate: true
          omitBodyDuringUpdate: true
          token: ${{ secrets.GITHUB_TOKEN }}

  release-linux:
    needs: build-linux
    runs-on: ubuntu-latest
    if: github.event.inputs.platform == 'all' || contains(github.event.inputs.platform, 'linux')
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Get release tag
        id: get_tag
        run: |
          if [ -z "${{ github.event.inputs.release_tag }}" ]; then
            TAG=$(git describe --tags --abbrev=0 || echo "v1.0.0")
          else
            TAG="${{ github.event.inputs.release_tag }}"
          fi
          echo "RELEASE_TAG=$TAG" >> $GITHUB_ENV
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ env.RELEASE_TAG }}
          name: Release ${{ env.RELEASE_TAG }}
          draft: false
          prerelease: false
          allowUpdates: true
          omitNameDuringUpdate: true
          omitBodyDuringUpdate: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Linux AppImage
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ env.RELEASE_TAG }}
          artifacts: 'artifacts/deepchat-linux-x64/*.AppImage'
          allowUpdates: true
          omitNameDuringUpdate: true
          omitBodyDuringUpdate: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Linux tar.gz
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ env.RELEASE_TAG }}
          artifacts: 'artifacts/deepchat-linux-x64/*.tar.gz'
          allowUpdates: true
          omitNameDuringUpdate: true
          omitBodyDuringUpdate: true
          token: ${{ secrets.GITHUB_TOKEN }}
